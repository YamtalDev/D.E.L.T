#!/bin/bash

# ----------------------------------------------------------------------------------
# Author: Tal Aharon
# License: GPL 2.x
#
# Purpose: Delete a directory specified by the user.
#
# Syntax: delete <folder_name>
#
# Arguments:
#   - <folder_name>: The name of the directory to be deleted.
#
# Description:
#   The `delete` script allows users to delete a directory from their home directory.
#   The function searches for the specified directory in the home directory (`$HOME`)
#   and its subdirectories. If the directory is found, the script prompts the user for
#   confirmation before proceeding with the deletion. The script uses the `rm -rf` command
#   to recursively and forcefully delete the specified directory and its contents.
#   The function handles errors gracefully and informs the user in case of any issues.
#
# Command-line Options:
#   None
#
# Examples:
#    $ delete my_folder
#
# Notes:
#   - Be cautious when using this script, as deleted files cannot be recovered.
#   - The script assumes the directories are being deleted from the user's home directory (~/).
#   - This script should be used responsibly, as it can lead to data loss if used incorrectly.
#   - It is recommended to double-check the directory name before confirming the deletion.
#
# ----------------------------------------------------------------------------------

trap "exit 0" SIGINT
# Function to delete a directory
function delete_directory()
{
    local dir_path=""
    local dir_name="$1"

    if [ -z "$dir_name" ]; then
        echo "Please provide the folder name to delete: delete <folder name>"
        return 1
    fi

    # Find the directory path
    dir_path=$(find "$HOME" -type d -name "$dir_name" \( $EXCLUDE_DIRS \) -prune | head -n 1)

    if [ -n "$dir_path" ]; then
        read -r -p "Are you sure you want to delete the directory $dir_name? [y/n] " choice
        case "$choice" in
            y|Y )
                if rm -rf "$dir_path"; then
                    echo "Directory $dir_name deleted successfully."
                    return 0
                else
                    echo "Failed to delete the directory."
                    return 1
                fi
                ;;
            n|N )
                echo "Deletion canceled."
                return 0
                ;;
            * )
                echo "Invalid choice. Deletion canceled."
                return 1
                ;;
        esac
    else
        echo "No such directory: $dir_name"
        return 1
    fi
}

# Call function and exit with the function's return status
delete_directory "$1"
exit $?